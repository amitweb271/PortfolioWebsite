import React, { useState } from 'react';
import userService from './UserService';

function LoginPage({ onLogin }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = async () => {
    try {
      const user = await userService.login(email, password);
      onLogin(user);
    } catch (error) {
      setError('Invalid email or password');
    }
  };

  return (
    <div>
      <h1>Login</h1>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <br />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <br />
      <button onClick={handleLogin}>Login</button>
    </div>
  );
}

export default LoginPage;

// UserService.js
import axios from 'axios';

class UserService {
  async login(email, password) {
    const response = await axios.post('/login', { email, password });
    localStorage.setItem('token', response.data.token);
    return response.data; // Assuming the response contains user data including role
  }

  async getUserInfo() {
    const token = localStorage.getItem('token');
    if (!token) return null;

    const response = await axios.get('/user', {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  }
}

export default new UserService();

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';
import LoginPage from './LoginPage';
import Sidebar from './Sidebar';
import HomePage from './HomePage';
import ProfilePage from './ProfilePage';
import SettingsPage from './SettingsPage';
import userService from './UserService';

function App() {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function checkAuth() {
      try {
        const userInfo = await userService.getUserInfo();
        setCurrentUser(userInfo);
      } catch (error) {
        console.error('Authentication failed:', error);
      } finally {
        setLoading(false);
      }
    }

    checkAuth();
  }, []);

  const handleLogin = (user) => {
    setCurrentUser(user);
  };

  const handleLogout = () => {
    setCurrentUser(null);
    localStorage.removeItem('token');
  };

  if (loading) return <div>Loading...</div>;

  return (
    <Router>
      {currentUser ? (
        <div>
          <Sidebar currentUser={currentUser} onLogout={handleLogout} />
          <div className="container">
            <Route exact path="/">
              {currentUser.role === 'admin' ? (
                <Redirect to="/dashboard" />
              ) : (
                <Redirect to="/home" />
              )}
            </Route>
            <Route path="/home">
              <HomePage currentUser={currentUser} />
            </Route>
            <Route path="/dashboard">
              <DashboardPage currentUser={currentUser} />
            </Route>
            <Route path="/profile">
              <ProfilePage currentUser={currentUser} />
            </Route>
            <Route path="/settings">
              <SettingsPage currentUser={currentUser} />
            </Route>
          </div>
        </div>
      ) : (
        <LoginPage onLogin={handleLogin} />
      )}
    </Router>
  );
}

export default App;

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';
import LoginPage from './LoginPage';
import Sidebar from './Sidebar';
import HomePage from './HomePage';
import ProfilePage from './ProfilePage';
import SettingsPage from './SettingsPage';

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');

  useEffect(() => {
    // Check if the user is logged in by checking the token in local storage
    const token = localStorage.getItem('token');
    if (token) {
      setIsLoggedIn(true);
      // You might also fetch user details here and set the username
    }
  }, []);

  const handleLogin = (username) => {
    setUsername(username);
    setIsLoggedIn(true);
  };

  const handleLogout = () => {
    localStorage.removeItem('token'); // Remove token from local storage
    setIsLoggedIn(false);
  };

  return (
    <Router>
      <div>
        {isLoggedIn && <Sidebar onLogout={handleLogout} />}
        <div className="container">
          {/* Render content only when logged in */}
          {isLoggedIn && (
            <React.Fragment>
              <Route exact path="/">
                <Redirect to="/home" />
              </Route>
              <Route path="/home">
                <HomePage username={username} />
              </Route>
              <Route path="/profile">
                <ProfilePage />
              </Route>
              <Route path="/settings">
                <SettingsPage />
              </Route>
              {/* Add other routes for additional pages/components */}
            </React.Fragment>
          )}
          {/* Render login page if not logged in */}
          {!isLoggedIn && <Route path="/login"><LoginPage onLogin={handleLogin} /></Route>}
        </div>
      </div>
    </Router>
  );
}

export default App;


import React from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';

const validationSchema = Yup.object({
  email: Yup.string().email('Invalid email address').required('Email is required'),
  phoneNumber: Yup.string().matches(/^[0-9]{10}$/, 'Invalid phone number').required('Phone number is required'),
});

const MyForm = () => {
  const formik = useFormik({
    initialValues: {
      email: '',
      phoneNumber: '',
    },
    validationSchema: validationSchema,
    onSubmit: values => {
      console.log(values);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <div>
        <label htmlFor="email">Email Address</label>
        <input
          id="email"
          name="email"
          type="email"
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
          value={formik.values.email}
        />
        {formik.touched.email && formik.errors.email ? (
          <div>{formik.errors.email}</div>
        ) : null}
      </div>
      <div>
        <label htmlFor="phoneNumber">Phone Number</label>
        <input
          id="phoneNumber"
          name="phoneNumber"
          type="text"
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
          value={formik.values.phoneNumber}
        />
        {formik.touched.phoneNumber && formik.errors.phoneNumber ? (
          <div>{formik.errors.phoneNumber}</div>
        ) : null}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default MyForm;

import React, { useState } from 'react';
import validator from 'validator';

function LoginForm() {
  const [email, setEmail] = useState('');
  const [emailError, setEmailError] = useState('');

  const handleEmailChange = (e) => {
    setEmail(e.target.value);
  };

  const validateEmail = () => {
    if (!validator.isEmail(email)) {
      setEmailError('Please enter a valid email address');
    } else {
      setEmailError('');
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    validateEmail();

    // Additional login logic
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Email:</label>
        <input type="email" value={email} onChange={handleEmailChange} />
        {emailError && <span style={{ color: 'red' }}>{emailError}</span>}
      </div>
      <button type="submit">Login</button>
    </form>
  );
}

export default LoginForm;
