import React, { useState } from 'react';
import axios from 'axios';
import DataTable from 'react-data-table-component';
import { saveAs } from 'file-saver';
import './App.css'; // Ensure this import matches your CSS file path

const FileUpload = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [data, setData] = useState([]);
  const [downloadUrl, setDownloadUrl] = useState(null);

  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  const handleSendRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log('File uploaded successfully:', response.data);
      setData(response.data); // Set the response data to the state
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };

  const handleSendExcelRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload-excel', formData, {
        responseType: 'blob',
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      setDownloadUrl(URL.createObjectURL(blob));
    } catch (error) {
      console.error('Error uploading Excel file:', error);
    }
  };

  const handleDownloadExcel = () => {
    if (downloadUrl) {
      saveAs(downloadUrl, 'response.xlsx');
      URL.revokeObjectURL(downloadUrl);
      setDownloadUrl(null);
    }
  };

  // Define columns for the main data table
  const columns = [
    {
      name: 'ID',
      selector: row => row.id,
      sortable: true,
    },
    {
      name: 'Tune Code',
      selector: row => row.tuneCode,
      sortable: true,
    },
    {
      name: 'Tune Number',
      selector: row => row.tuneNo,
      sortable: true,
    },
    {
      name: 'Artist Name',
      selector: row => row.details.artist.name,
      sortable: true,
    },
    {
      name: 'Artist Genre',
      selector: row => row.details.artist.genre,
      sortable: true,
    },
    {
      name: 'Album Title',
      selector: row => row.details.album.title,
      sortable: true,
    },
    {
      name: 'Album Year',
      selector: row => row.details.album.year,
      sortable: true,
    },
  ];

  // Component to render nested tracks
  const ExpandedComponent = ({ data }) => (
    <div className="expanded-table-container">
      <DataTable
        title="Tracks"
        columns={[
          {
            name: 'Track Number',
            selector: row => row.trackNo,
            sortable: true,
          },
          {
            name: 'Track Name',
            selector: row => row.trackName,
            sortable: true,
          },
        ]}
        data={data.details.tracks}
        noHeader
        pagination
      />
    </div>
  );

  // Custom styles for the DataTable
  const customStyles = {
    header: {
      style: {
        backgroundColor: 'red',
        color: 'white',
      },
    },
  };

  return (
    <div>
      <div>
        <input type="file" onChange={handleFileChange} />
        <button onClick={handleSendRequest}>Send</button>
        <button onClick={handleSendExcelRequest}>Send Excel</button>
        <button onClick={handleDownloadExcel} disabled={!downloadUrl}>Download Excel</button>
      </div>
      {data.length > 0 && (
        <DataTable
          title="Response Data"
          columns={columns}
          data={data}
          pagination
          expandableRows
          expandableRowsComponent={ExpandedComponent}
          customStyles={customStyles}
        />
      )}
    </div>
  );
};

export default FileUpload;

import React, { useState } from 'react';
import axios from 'axios';
import DataTable from 'react-data-table-component';
import { saveAs } from 'file-saver';
import './App.css'; // Ensure this import matches your CSS file path

const FileUpload = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [data, setData] = useState([]);
  const [downloadUrl, setDownloadUrl] = useState(null);

  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  const handleSendRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log('File uploaded successfully:', response.data);
      setData(response.data); // Set the response data to the state
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };

  const handleSendExcelRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload-excel', formData, {
        responseType: 'blob',
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      setDownloadUrl(URL.createObjectURL(blob));
    } catch (error) {
      console.error('Error uploading Excel file:', error);
    }
  };

  const handleDownloadExcel = () => {
    if (downloadUrl) {
      saveAs(downloadUrl, 'response.xlsx');
      URL.revokeObjectURL(downloadUrl);
      setDownloadUrl(null);
    }
  };

  // Define columns for the main data table
  const columns = [
    {
      name: 'ID',
      selector: row => row.id,
      sortable: true,
    },
    {
      name: 'Tune Code',
      selector: row => row.tuneCode,
      sortable: true,
    },
    {
      name: 'Tune Number',
      selector: row => row.tuneNo,
      sortable: true,
    },
    {
      name: 'Artist Name',
      selector: row => row.details.artist.name,
      sortable: true,
    },
    {
      name: 'Artist Genre',
      selector: row => row.details.artist.genre,
      sortable: true,
    },
    {
      name: 'Album Title',
      selector: row => row.details.album.title,
      sortable: true,
    },
    {
      name: 'Album Year',
      selector: row => row.details.album.year,
      sortable: true,
    },
  ];

  // Component to render nested tracks
  const ExpandedComponent = ({ data }) => (
    <div className="expanded-table-container">
      <DataTable
        title="Tracks"
        columns={[
          {
            name: 'Track Number',
            selector: row => row.trackNo,
            sortable: true,
          },
          {
            name: 'Track Name',
            selector: row => row.trackName,
            sortable: true,
          },
        ]}
        data={data.details.tracks}
        noHeader
        pagination
      />
    </div>
  );

  // Custom styles for the DataTable
  const customStyles = {
    header: {
      style: {
        backgroundColor: 'red',
        color: 'white',
      },
    },
  };

  return (
    <div>
      <div>
        <input type="file" onChange={handleFileChange} />
        <button onClick={handleSendRequest}>Send</button>
        <button onClick={handleSendExcelRequest}>Send Excel</button>
        <button onClick={handleDownloadExcel} disabled={!downloadUrl}>Download Excel</button>
      </div>
      {data.length > 0 && (
        <DataTable
          title="Response Data"
          columns={columns}
          data={data}
          pagination
          expandableRows
          expandableRowsComponent={ExpandedComponent}
          customStyles={customStyles}
        />
      )}
    </div>
  );
};

export default FileUpload;





const ExpandedComponent = ({ data }) => (
  <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center' }}>
    <DataTable
      title="Tracks"
      columns={[
        {
          name: 'Track Number',
          selector: row => row.trackNo,
          sortable: true,
        },
        {
          name: 'Track Name',
          selector: row => row.trackName,
          sortable: true,
        },
      ]}
      data={data.details.tracks}
      noHeader
      pagination
    />
  </div>
);


.expanded-table-container {
  display: flex;
  justify-content: flex-start;
  align-items: center;
}
import React, { useState } from 'react';
import axios from 'axios';
import DataTable from 'react-data-table-component';
import { saveAs } from 'file-saver';
import './App.css'; // Ensure this import matches your CSS file path

const FileUpload = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [data, setData] = useState([]);
  const [downloadUrl, setDownloadUrl] = useState(null);

  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  const handleSendRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log('File uploaded successfully:', response.data);
      setData(response.data); // Set the response data to the state
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };

  const handleSendExcelRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload-excel', formData, {
        responseType: 'blob',
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      setDownloadUrl(URL.createObjectURL(blob));
    } catch (error) {
      console.error('Error uploading Excel file:', error);
    }
  };

  const handleDownloadExcel = () => {
    if (downloadUrl) {
      saveAs(downloadUrl, 'response.xlsx');
      URL.revokeObjectURL(downloadUrl);
      setDownloadUrl(null);
    }
  };

  // Define columns for the main data table
  const columns = [
    {
      name: 'ID',
      selector: row => row.id,
      sortable: true,
    },
    {
      name: 'Tune Code',
      selector: row => row.tuneCode,
      sortable: true,
    },
    {
      name: 'Tune Number',
      selector: row => row.tuneNo,
      sortable: true,
    },
    {
      name: 'Artist Name',
      selector: row => row.details.artist.name,
      sortable: true,
    },
    {
      name: 'Artist Genre',
      selector: row => row.details.artist.genre,
      sortable: true,
    },
    {
      name: 'Album Title',
      selector: row => row.details.album.title,
      sortable: true,
    },
    {
      name: 'Album Year',
      selector: row => row.details.album.year,
      sortable: true,
    },
  ];

  // Component to render nested tracks
  const ExpandedComponent = ({ data }) => (
    <div className="expanded-table-container">
      <DataTable
        title="Tracks"
        columns={[
          {
            name: 'Track Number',
            selector: row => row.trackNo,
            sortable: true,
          },
          {
            name: 'Track Name',
            selector: row => row.trackName,
            sortable: true,
          },
        ]}
        data={data.details.tracks}
        noHeader
        pagination
      />
    </div>
  );

  return (
    <div>
      <div>
        <input type="file" onChange={handleFileChange} />
        <button onClick={handleSendRequest}>Send</button>
        <button onClick={handleSendExcelRequest}>Send Excel</button>
        <button onClick={handleDownloadExcel} disabled={!downloadUrl}>Download Excel</button>
      </div>
      {data.length > 0 && (
        <DataTable
          title="Response Data"
          columns={columns}
          data={data}
          pagination
          expandableRows
          expandableRowsComponent={ExpandedComponent}
        />
      )}
    </div>
  );
};

export default FileUpload;


.custom-header {
  background-color: red;
  color: white; /* Optionally, change the text color for better contrast */
}


import React, { useState } from 'react';
import axios from 'axios';
import DataTable from 'react-data-table-component';
import { saveAs } from 'file-saver';
import './App.css'; // Ensure this import matches your CSS file path

const FileUpload = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [data, setData] = useState([]);
  const [downloadUrl, setDownloadUrl] = useState(null);

  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  const handleSendRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log('File uploaded successfully:', response.data);
      setData(response.data); // Set the response data to the state
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };

  const handleSendExcelRequest = async () => {
    if (!selectedFile) {
      alert("Please select a file first!");
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/upload-excel', formData, {
        responseType: 'blob',
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      setDownloadUrl(URL.createObjectURL(blob));
    } catch (error) {
      console.error('Error uploading Excel file:', error);
    }
  };

  const handleDownloadExcel = () => {
    if (downloadUrl) {
      saveAs(downloadUrl, 'response.xlsx');
      URL.revokeObjectURL(downloadUrl);
      setDownloadUrl(null);
    }
  };

  // Define columns for the main data table
  const columns = [
    {
      name: 'ID',
      selector: row => row.id,
      sortable: true,
    },
    {
      name: 'Tune Code',
      selector: row => row.tuneCode,
      sortable: true,
    },
    {
      name: 'Tune Number',
      selector: row => row.tuneNo,
      sortable: true,
    },
    {
      name: 'Artist Name',
      selector: row => row.details.artist.name,
      sortable: true,
    },
    {
      name: 'Artist Genre',
      selector: row => row.details.artist.genre,
      sortable: true,
    },
    {
      name: 'Album Title',
      selector: row => row.details.album.title,
      sortable: true,
    },
    {
      name: 'Album Year',
      selector: row => row.details.album.year,
      sortable: true,
    },
  ];

  // Component to render nested tracks
  const ExpandedComponent = ({ data }) => (
    <div className="expanded-table-container">
      <DataTable
        title="Tracks"
        columns={[
          {
            name: 'Track Number',
            selector: row => row.trackNo,
            sortable: true,
          },
          {
            name: 'Track Name',
            selector: row => row.trackName,
            sortable: true,
          },
        ]}
        data={data.details.tracks}
        noHeader
        pagination
      />
    </div>
  );

  // Custom styles for the DataTable
  const customStyles = {
    header: {
      style: {
        backgroundColor: 'red',
        color: 'white',
      },
    },
  };

  return (
    <div>
      <div>
        <input type="file" onChange={handleFileChange} />
        <button onClick={handleSendRequest}>Send</button>
        <button onClick={handleSendExcelRequest}>Send Excel</button>
        <button onClick={handleDownloadExcel} disabled={!downloadUrl}>Download Excel</button>
      </div>
      {data.length > 0 && (
        <DataTable
          title="Response Data"
          columns={columns}
          data={data}
          pagination
          expandableRows
          expandableRowsComponent={ExpandedComponent}
          customStyles={customStyles}
        />
      )}
    </div>
  );
};

export default FileUpload;



