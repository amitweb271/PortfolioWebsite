import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';
import LoginPage from './LoginPage';
import Navbar from './Navbar';
import Sidebar from './Sidebar';
import HomePage from './HomePage'; // Import your home page component

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');

  const handleLogin = (username) => {
    setUsername(username);
    setIsLoggedIn(true);
  };

  const handleLogout = () => {
    localStorage.removeItem('token'); // Remove token from local storage
    setIsLoggedIn(false);
  };

  // Check if the user is logged in by checking the token in local storage
  // You might need to adjust the logic based on your authentication mechanism
  if (!isLoggedIn && !localStorage.getItem('token')) {
    return <LoginPage onLogin={handleLogin} />;
  }

  return (
    <Router>
      <div>
        <Navbar onLogout={handleLogout} />
        <Sidebar />
        <div>
          {/* Define routes */}
          <Route exact path="/">
            <Redirect to="/home" />
          </Route>
          <Route path="/home">
            <HomePage username={username} />
          </Route>
          {/* Add other routes for additional pages/components */}
        </div>
      </div>
    </Router>
  );
}

export default App;

import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';
import LoginPage from './LoginPage';
import Navbar from './Navbar';
import Sidebar from './Sidebar';
import HomePage from './HomePage'; // Import your home page component

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');

  const handleLogin = (username) => {
    setUsername(username);
    setIsLoggedIn(true);
  };

  const handleLogout = () => {
    localStorage.removeItem('token'); // Remove token from local storage
    setIsLoggedIn(false);
  };

  // Check if the user is logged in by checking the token in local storage
  // You might need to adjust the logic based on your authentication mechanism
  if (!isLoggedIn && !localStorage.getItem('token')) {
    return <LoginPage onLogin={handleLogin} />;
  }

  return (
    <Router>
      <div>
        <Navbar onLogout={handleLogout} />
        <Sidebar />
        <div>
          {/* Define routes */}
          <Route exact path="/">
            <Redirect to="/home" />
          </Route>
          <Route path="/home">
            {isLoggedIn ? <HomePage username={username} /> : <Redirect to="/login" />}
          </Route>
          <Route path="/login">
            {!isLoggedIn ? <LoginPage onLogin={handleLogin} /> : <Redirect to="/home" />}
          </Route>
          {/* Add other routes for additional pages/components */}
        </div>
      </div>
    </Router>
  );
}

export default App;


import React from 'react';

function Navbar({ onLogout }) {
  const handleLogout = () => {
    onLogout();
    alert('Logged out successfully!');
  };

  return (
    <div>
      <h2>Navbar</h2>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
}

export default Navbar;


import React, { useState } from 'react';
import axios from 'axios';

function LoginPage({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = async () => {
    try {
      const response = await axios.post('YOUR_LOGIN_API_ENDPOINT', {
        username,
        password,
      });

      if (response.status === 200) {
        const token = response.data.token; // Assuming the response contains a token
        localStorage.setItem('token', token); // Store token in local storage
        onLogin(username);
      } else {
        setError('An error occurred. Please try again.');
      }
    } catch (error) {
      console.error('Error:', error);
      setError('An error occurred. Please try again.');
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleLogin();
    }
  };

  return (
    <div>
      <h1>Login</h1>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <input
        type="text"
        placeholder="Username"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      <br />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        onKeyPress={handleKeyPress}
      />
      <br />
      <button onClick={handleLogin}>Login</button>
    </div>
  );
}

export default LoginPage;

