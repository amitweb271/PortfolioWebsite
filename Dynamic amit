import React, { useState, useEffect } from 'react';
import axios from 'axios';

function ProductInfo() {
  const [products, setProducts] = useState([]);
  const [selectedProductIndex, setSelectedProductIndex] = useState(0);
  const [productDetails, setProductDetails] = useState(null);

  useEffect(() => {
    // Fetch product data from API
    axios.get('your_api_endpoint')
      .then(response => {
        setProducts(response.data);
        // Fetch details for the first product initially
        fetchProductDetails(response.data[0].id);
      })
      .catch(error => {
        console.error('Error fetching products:', error);
      });
  }, []);

  const fetchProductDetails = (productId) => {
    // Fetch product details based on selected product ID
    axios.get(`your_api_endpoint/${productId}`)
      .then(response => {
        setProductDetails(response.data);
      })
      .catch(error => {
        console.error('Error fetching product details:', error);
      });
  };

  const handleProductChange = (event) => {
    const selectedIndex = event.target.selectedIndex;
    setSelectedProductIndex(selectedIndex);
    const selectedProductId = event.target.value;
    fetchProductDetails(selectedProductId);
  };

  const handleRemoveProduct = () => {
    // Remove the product from the local state using the spread operator
    setProducts(prevProducts => [...prevProducts.slice(0, selectedProductIndex), ...prevProducts.slice(selectedProductIndex + 1)]);

    // Fetch details for the next product if available
    if (products.length > 1) {
      const nextProductId = products[selectedProductIndex % (products.length - 1)].id;
      fetchProductDetails(nextProductId);
    } else {
      setProductDetails(null); // No products left
    }
  };

  const handleAddProduct = () => {
    // Assuming you have a function to add a new product
    // Here, I'm adding a dummy product, replace this with your logic
    const newProduct = {
      id: Math.random().toString(), // replace with actual ID logic
      name: `New Product ${products.length + 1}`,
      // Add other properties as needed
    };

    // Add the new product to the local state using the spread operator
    setProducts(prevProducts => [...prevProducts, newProduct]);

    // Fetch details for the newly added product
    fetchProductDetails(newProduct.id);
  };

  return (
    <div>
      <label>Select Product:</label>
      <select value={products[selectedProductIndex]?.id} onChange={handleProductChange}>
        {products.map(product => (
          <option key={product.id} value={product.id}>{product.name}</option>
        ))}
      </select>

      {productDetails && (
        <div>
          <h2>Product Details</h2>
          <table>
            <thead>
              <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Amount</th>
                <th>Discount</th>
                <th>Shipping Charges</th>
                <th>HSN Code</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>{productDetails.name}</td>
                {/* Add other details as needed */}
              </tr>
            </tbody>
          </table>
          <button onClick={handleRemoveProduct}>Remove Product</button>
        </div>
      )}

      <button onClick={handleAddProduct}>Add Product</button>
    </div>
  );
}

export default ProductInfo;
